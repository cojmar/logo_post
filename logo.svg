<svg width="100%" height="100%" viewBox="0 0 400 150" xmlns="http://www.w3.org/2000/svg">
  <style type="text/css">
    .st0 {
      fill: #ffffff;
    }

    .st1 {
      fill: #ffffff;
    }
  </style>

  <circle id="svg_2" r="201.6" cy="75" cx="200" class="st1" />
  <g id="svg_3" transform="translate(2,0)">
    <path id="svg_4"
      d="M208.1,34.4h-16.2h-16.2v16.3v16.2v16.2v16.2v16.3h16.2V99.3V83.1h16.2h16.2V66.9V50.7V34.4H208.1z M208.1,66.9h-16.2V50.7h16.2V66.9z" />
    <rect id="svg_8" class="st0" height="18" width="18" y="33" x="208" />
    <rect id="svg_9" class="st0" height="16" width="18" y="67" x="174" />
  </g>

  <script type="text/javascript">
    <![CDATA[
    new class {
          constructor() {
            this.fps = 60
            this.animations = {}
            this.items = {
              circle: document.getElementById('svg_2'),
              p: document.getElementById('svg_3'),
              squere1: document.getElementById('svg_8'),
              squere2: document.getElementById('svg_9'),

            }
            this.step = 28.16901408450704
            this.main()
          }
          async main() {
            this.items.p.setAttribute('opacity', 1)
            this.items.squere1.setAttribute('opacity', 0)
            this.items.squere2.setAttribute('opacity', 0)

            this.animation(this.items.circle, { r: 64 }, 16)
            await this.sleep(2)
            await this.animation(this.items.p, { opacity: 0.1 }, 3)
            await this.animation(this.items.p, { opacity: 1 }, 6)
            await this.animation(this.items.p, { opacity: 0 }, 6)
            await this.animation(this.items.p, { opacity: 1 }, 6)
            await this.animation(this.items.p, { opacity: 0 }, 6)
            await this.animation(this.items.p, { opacity: 1 }, 6)

            this.animation(this.items.squere1, { opacity: 1 }, 6).then(async () => {
              for (let i = 0; i <= 2; i++) {
                await this.animation(this.items.squere1, { opacity: 0 }, 3)
                await this.animation(this.items.squere1, { opacity: 1 }, 3)
              }
            })

            this.animation(this.items.squere2, { opacity: 1 }, 15).then(async () => {
              await this.sleep()
              for (let i = 0; i <= 2; i++) {
                await this.animation(this.items.squere2, { opacity: 0 }, 3)
                await this.animation(this.items.squere2, { opacity: 1 }, 3)
              }
            })
          }
          sleep(steps = 1) {
            return new Promise((resolve, reject) => setTimeout(() => resolve(), steps * this.step))
          }
          animation(element, data, duration) {
            duration *= this.step
            return new Promise((resolve, reject) => {
              let done = 0
              let items = Object.keys(data).length
              Object.keys(data).map((key) => {
                let old_val = element.getAttribute(key)
                if (!old_val) return
                let ani = {
                  prop: key,
                  val: parseFloat(old_val),
                  final_val: data[key],
                  frame: 0,
                  frames: duration / 1000 * this.fps
                }
                ani.inc = Math.abs(data[key] - ani.val) / ani.frames
                if (ani.val > data[key]) ani.inc *= -1
                ani.interval = setInterval(() => {
                  ani.val += ani.inc
                  element.setAttribute(ani.prop, ani.val)
                  ani.frame++
                  if (ani.frame < ani.frames) return
                  clearInterval(ani.interval)
                  element.setAttribute(ani.prop, ani.final_val)
                  done++
                  if (done === items) resolve()
                }, 1000 / this.fps)
              })
            })
          }
        }
    ]]>
  </script>
</svg>